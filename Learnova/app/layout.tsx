import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";
import Header from "../components/Header";
import Footer from "../components/Footer";
import React, { createContext, useContext, useEffect, useState } from "react";
import Script from "next/script";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

function useAnalytics() {
  useEffect(() => {
    // Example: Replace with Plausible, Fathom, or your own privacy-first analytics
    // Track session start
    const sessionStart = Date.now();
    window.addEventListener("beforeunload", () => {
      const sessionLength = Date.now() - sessionStart;
      // Send sessionLength to analytics endpoint (privacy-respecting)
    });
    // Track feature usage and quizzes taken via custom events elsewhere
  }, []);
}

const AccessibilityContext = createContext({
  darkMode: false,
  fontSize: "medium",
  setDarkMode: (_: boolean) => {},
  setFontSize: (_: string) => {},
});

export function useAccessibility() {
  return useContext(AccessibilityContext);
}

function AccessibilityProvider({ children }: { children: React.ReactNode }) {
  const [darkMode, setDarkMode] = useState(false);
  const [fontSize, setFontSize] = useState("medium");
  return (
    <AccessibilityContext.Provider value={{ darkMode, setDarkMode, fontSize, setFontSize }}>
      <div className={darkMode ? "dark" : ""} style={{ fontSize: fontSize === "large" ? 20 : fontSize === "small" ? 14 : 16 }}>
        {children}
      </div>
    </AccessibilityContext.Provider>
  );
}

function AccessibilityToggles() {
  const { darkMode, setDarkMode, fontSize, setFontSize } = useAccessibility();
  return (
    <div style={{ display: "flex", gap: 12, alignItems: "center", margin: "8px 0 8px 0" }}>
      <label>
        <input type="checkbox" checked={darkMode} onChange={e => setDarkMode(e.target.checked)} /> Dark mode
      </label>
      <label>
        Font size:
        <select value={fontSize} onChange={e => setFontSize(e.target.value)} style={{ marginLeft: 4 }}>
          <option value="small">Small</option>
          <option value="medium">Medium</option>
          <option value="large">Large</option>
        </select>
      </label>
    </div>
  );
}

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  useAnalytics();
  return (
    <html lang="en">
      <body
        className={`${geistSans.variable} ${geistMono.variable}`}
        style={{
          minHeight: "100vh",
          display: "flex",
          flexDirection: "column",
        }}
      >
        <a
          href="#main-content"
          style={{
            position: "absolute",
            left: 0,
            top: 0,
            background: "#fff",
            color: "#4f46e5",
            padding: 8,
            zIndex: 200,
            transform: "translateY(-120%)",
            transition: "transform 0.2s",
          }}
          onFocus={(e: React.FocusEvent<HTMLAnchorElement>) => {
            e.currentTarget.style.transform = "translateY(0)";
          }}
          onBlur={(e: React.FocusEvent<HTMLAnchorElement>) => {
            e.currentTarget.style.transform = "translateY(-120%)";
          }}
        >
          Skip to content
        </a>
        <AccessibilityProvider>
          <AccessibilityToggles />
          <Header />
          <div id="main-content" style={{ flex: 1 }}>
            {children}
          </div>
          <Footer />
        </AccessibilityProvider>
        <Script
          strategy="afterInteractive"
          data-domain="learnova.app"
          src="https://plausible.io/js/plausible.js"
        />
      </body>
    </html>
  );
}
